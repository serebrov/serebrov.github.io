{"title":"OOP SOLID Principles \"L\" - Liskov Substitution Principle","date":"2016-02-18T00:00:00.000Z","tags":"oop","type":"post","intro":"<p>According to the <a href=\"https://en.wikipedia.org/wiki/Liskov_substitution_principle\">Wikipedia</a> the Liskov Substitution Principle (LSP) is defined as:</p>\n<pre><code>Subtype Requirement:\nLet f(x) be a property provable about objects x of type T.\nThen f(y) should be true for objects y of type S where S is a subtype of T.\n</code></pre><p>The basic idea - if you have an object of type <code>T</code> then you can also use objects of its subclasses instead of it.</p>\n<p>Or, in other words: the subclass should behave the same way as the base class. It can add some new features on top of the base class (that&#39;s the purpose of inheritance, right?), but it can not break expectations about the base class behavior.</p>\n"}
