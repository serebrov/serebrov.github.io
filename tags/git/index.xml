<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>git on vim, git, aws and other three-letter words</title>
    <link>https://serebrov.github.io/tags/git/</link>
    <description>Recent content in git on vim, git, aws and other three-letter words</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 16 Jun 2019 00:00:00 +0000</lastBuildDate><atom:link href="https://serebrov.github.io/tags/git/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Git Hook to Add Issue Number to Commit Message</title>
      <link>https://serebrov.github.io/html/2019-06-16-git-hook-to-add-issue-number-to-commit-message.html</link>
      <pubDate>Sun, 16 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://serebrov.github.io/html/2019-06-16-git-hook-to-add-issue-number-to-commit-message.html</guid>
      <description>When using project management system (Jira, Redmine, Github issues, etc) it is useful to add the issue number into commit message that makes is easier to understand which issue the commit belongs to and often allows the project management system to display related commits.
For same reasons, it is also useful to include the issue number into branch name, such as 123-branch-description or feature/PROJECT-123-branch-description.
The process of adding the issue number into commit message can be automated with git prepare-commit-msg hook (shell script).</description>
    </item>
    
    <item>
      <title>Simple Git Workflow</title>
      <link>https://serebrov.github.io/html/2016-07-03-simple-git-workflow.html</link>
      <pubDate>Sun, 03 Jul 2016 00:00:00 +0000</pubDate>
      
      <guid>https://serebrov.github.io/html/2016-07-03-simple-git-workflow.html</guid>
      <description>The main purpose of this workflow is to have a reliable, but simple to use git workflow. It is simple enough to be used by git beginners and minimizes possibility of mistakes (comparing to advanced flows which use rebase and related git features to achieve clean history).
The main idea of this workflow is that we create a new branch for every task and one developer works on this branch until the task is finished.</description>
    </item>
    
    <item>
      <title>Git - how to revert multiple recent commits</title>
      <link>https://serebrov.github.io/html/2014-01-04-git-revert-multiple-recent-comments.html</link>
      <pubDate>Sat, 04 Jan 2014 00:00:00 +0000</pubDate>
      
      <guid>https://serebrov.github.io/html/2014-01-04-git-revert-multiple-recent-comments.html</guid>
      <description>Let&amp;rsquo;s assume we have a history like this:
G1 - G2 - G3 - B1 - B2 - B3 Where G1-G3 are &amp;lsquo;good&amp;rsquo; commits and B1-B3 are &amp;lsquo;bad&amp;rsquo; commits and we want to revert them.
Here is the shell script to create the revision history like above, you can use it to try and see the effect of different commands.
git reset The first method is a simple way to throw away few recent commits, it re-writes the commit history, so only use it when your changes are not pushed to the server yet (or when you are 100% sure about what you are doing).</description>
    </item>
    
    <item>
      <title>How to keep git log and less output on the screen</title>
      <link>https://serebrov.github.io/html/2014-01-04-git-log-and-less-keep-output.html</link>
      <pubDate>Sat, 04 Jan 2014 00:00:00 +0000</pubDate>
      
      <guid>https://serebrov.github.io/html/2014-01-04-git-log-and-less-keep-output.html</guid>
      <description>When git uses less as pager the output of commands like git log disappears from the console screen when you exit from less. This is not convenient in many cases so here is how to fix this.
Just for git commands:
git config --global --replace-all core.pager &amp;quot;less -iXFR&amp;quot;  For less globally (including git) - add to .bashrc / .zshrc / etc:
export LESS=-iXFR  The options we set for less are:</description>
    </item>
    
    <item>
      <title>How to setup git server on ubuntu with push email notifications</title>
      <link>https://serebrov.github.io/html/2013-06-14-git-server-setup.html</link>
      <pubDate>Fri, 14 Jun 2013 00:00:00 +0000</pubDate>
      
      <guid>https://serebrov.github.io/html/2013-06-14-git-server-setup.html</guid>
      <description>Git Server Prerequisites are git and ssh-server (apt-get install openssh-server).
The installation process is described in the Pro Git book. Below is the setup process with some comments and updates.
Add git user, set some password (you will be asked for it):
$ sudo adduser git Log in as git user and setup authorized ssh keys:
$ su git git@localname$ cd ~ git@localname$ mkdir .ssh For each user who need an access to the server add user&amp;rsquo;s public key into ~/.</description>
    </item>
    
    <item>
      <title>git - find not merged branches</title>
      <link>https://serebrov.github.io/html/2012-10-01-git-find-not-merged-branches.html</link>
      <pubDate>Mon, 01 Oct 2012 00:00:00 +0000</pubDate>
      
      <guid>https://serebrov.github.io/html/2012-10-01-git-find-not-merged-branches.html</guid>
      <description>git-branch(1)
With &amp;ndash;contains, shows only the branches that contain the named commit (in other words, the branches whose tip commits are descendants of the named commit).
With &amp;ndash;merged, only branches merged into the named commit (i.e. the branches whose tip commits are reachable from the named commit) will be listed.
With &amp;ndash;no-merged only branches not merged into the named commit will be listed. If the argument is missing it defaults to HEAD (i.</description>
    </item>
    
    <item>
      <title>git - view changes - diff and log</title>
      <link>https://serebrov.github.io/html/2012-10-01-git-diff-and-log.html</link>
      <pubDate>Mon, 01 Oct 2012 00:00:00 +0000</pubDate>
      
      <guid>https://serebrov.github.io/html/2012-10-01-git-diff-and-log.html</guid>
      <description>Diff staged changes git diff --cached # or git diff --staged Diff pulled changes git pull origin git diff @{1}.. Diff two branches ... A ---- B ---- C ---- D master \  E ---- F test We can use both git diff (to get differences) or git log (to get list of changes):
git log/diff master..test F E git log/diff test..master D C git log/diff master...test D C F E git log --left-right master.</description>
    </item>
    
    <item>
      <title>git - find all branches where file was changed</title>
      <link>https://serebrov.github.io/html/2012-09-30-git-all-branches-with-file.html</link>
      <pubDate>Sun, 30 Sep 2012 00:00:00 +0000</pubDate>
      
      <guid>https://serebrov.github.io/html/2012-09-30-git-all-branches-with-file.html</guid>
      <description>Solution from stackoverflow.
Find all branches which contain a change to FILENAME (even if before the (non-recorded) branch point):
git log --all --format=%H FILENAME | while read f; do git branch --contains $f; done | sort -u Manually inspect:
gitk --all --date-order -- FILENAME Find all changes to FILENAME not merged to master:
git for-each-ref --format=&amp;#34;%(refname:short)&amp;#34; refs/heads | grep -v master | while read br; do git cherry master $br | while read x h; do if [ &amp;#34;`git log -n 1 --format=%H $h-- FILENAME`&amp;#34; = &amp;#34;$h&amp;#34; ]; then echo $br; fi; done; done | sort -u </description>
    </item>
    
    <item>
      <title>git - Your branch is ahead of &#39;origin/master&#39; by 1 commit after pull</title>
      <link>https://serebrov.github.io/html/2012-09-30-git-branch-ahead-after-pull.html</link>
      <pubDate>Sun, 30 Sep 2012 00:00:00 +0000</pubDate>
      
      <guid>https://serebrov.github.io/html/2012-09-30-git-branch-ahead-after-pull.html</guid>
      <description>Your branch is ahead of &amp;lsquo;origin/master&amp;rsquo; by 1 commit (or X commits) after git pull origin master.
The sequence:
 Have up-to-date repository There is a change in the origin/master Do git pull origin master Change is received and merged git status shows “Your branch is ahead of &amp;lsquo;origin/master&amp;rsquo; by 1 commit.”  The reason is because during pull origin master reference to the remote origin/master is not changed (still points to older version).</description>
    </item>
    
    <item>
      <title>git - submodule helpers</title>
      <link>https://serebrov.github.io/html/2012-06-15-android-mobile-network-problem.html</link>
      <pubDate>Sun, 23 Sep 2012 00:00:00 +0000</pubDate>
      
      <guid>https://serebrov.github.io/html/2012-06-15-android-mobile-network-problem.html</guid>
      <description>Below are some git commands which can be useful to resolve problems with submodules.
Get a list of commits inside a submodule Submodules are identified by SHA-1 hashes so you may need to get a list of them. Do the following inside the submodule folder (or inside the separate submodule repository):
git log --oneline 5bd722f commit 5 b5c1524 commit 4 2444bfa commit 3 e0eadd5 commit 2 c180c5a commit 1 702fc8a commit 0 View current submodule commit git submodule status 5bd722fa26dcdd64128392aa28e08849fe37f111 sub (heads/master) Compare a submodule state with another branch Assume we are on the &amp;ldquo;branch1&amp;rdquo; and want to compare &amp;lsquo;sub&amp;rsquo; submodule state with master:</description>
    </item>
    
    <item>
      <title>git - use vim with fugitive to resolve merge conflicts</title>
      <link>https://serebrov.github.io/html/2012-04-03-vim-replace-word-with-yanked-text.html</link>
      <pubDate>Tue, 24 Apr 2012 00:00:00 +0000</pubDate>
      
      <guid>https://serebrov.github.io/html/2012-04-03-vim-replace-word-with-yanked-text.html</guid>
      <description>To use fugitive as you mergetool you can use the following.
git config --global mergetool.fugitive.cmd &amp;#39;vim -f -c &amp;#34;Gdiff&amp;#34; &amp;#34;$MERGED&amp;#34;&amp;#39; git config --global merge.tool fugitive Links stackoverflow fugitive screencast</description>
    </item>
    
    <item>
      <title>git - git rm already deleted files</title>
      <link>https://serebrov.github.io/html/2012-10-01-git-rm-deleted-files.html</link>
      <pubDate>Tue, 03 Apr 2012 00:00:00 +0000</pubDate>
      
      <guid>https://serebrov.github.io/html/2012-10-01-git-rm-deleted-files.html</guid>
      <description>git add -u This tells git to automatically stage tracked files - including deleting the previously tracked files.
Stackoverflow: How do I commit all deleted files in Git?</description>
    </item>
    
    <item>
      <title>git - rename branch (local and remote)</title>
      <link>https://serebrov.github.io/html/2012-03-15-oauth-1-0.html</link>
      <pubDate>Tue, 03 Apr 2012 00:00:00 +0000</pubDate>
      
      <guid>https://serebrov.github.io/html/2012-03-15-oauth-1-0.html</guid>
      <description>Rename local branch:
git branch -m old-branch-name new-branch-name Rename remote branch:
#delete remote branch with old name git push origin :old-branch-name # create remote renamed branch git push origin new-branch-name Links stackoverflow</description>
    </item>
    
    <item>
      <title>git - colored diff, branch, etc output by default</title>
      <link>https://serebrov.github.io/html/2012-02-13-git-branches-have-diverged.html</link>
      <pubDate>Tue, 28 Feb 2012 00:00:00 +0000</pubDate>
      
      <guid>https://serebrov.github.io/html/2012-02-13-git-branches-have-diverged.html</guid>
      <description>To have colored git commands output, use the following command:
git config color.ui true or (globally)
git config --global color.ui true Alternatively, you can set color for individual git commands.
git config color.branch auto git config color.diff auto git config color.interactive auto git config color.status auto See also color.* options in the git config docs.
Links git book
Color highlighted diffs with git, svn and cvs</description>
    </item>
    
    <item>
      <title>git - your branch and &#39;origin/xxx&#39; have diverged error</title>
      <link>https://serebrov.github.io/html/2012-02-10-git-checkout-and-track-remote-branch.html</link>
      <pubDate>Mon, 13 Feb 2012 00:00:00 +0000</pubDate>
      
      <guid>https://serebrov.github.io/html/2012-02-10-git-checkout-and-track-remote-branch.html</guid>
      <description>Git error:
Your branch and &#39;origin/xxx&#39; have diverged, and have 1 and 1 different commit(s) each, respectively.  The error is caused by two independent commits - one (or more) on the local branch copy and other - on the remote branch copy (for example, commit by another person to the same branch).
Another case for the error is git rebase (error is expected, see below).
The history looks like this:</description>
    </item>
    
    <item>
      <title>git - checkout and track remote branch</title>
      <link>https://serebrov.github.io/html/2012-01-24-jquery-check-version.html</link>
      <pubDate>Wed, 01 Feb 2012 00:00:00 +0000</pubDate>
      
      <guid>https://serebrov.github.io/html/2012-01-24-jquery-check-version.html</guid>
      <description>#creates and checks out &amp;#34;feature&amp;#34; branch that tracks &amp;#34;origin/feature&amp;#34; $ git checkout -t origin/feature Links A few git tips you didn&amp;rsquo;t know about</description>
    </item>
    
  </channel>
</rss>
