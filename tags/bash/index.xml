<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>bash on vim, git, aws and other three-letter words</title><link>https://serebrov.github.io/tags/bash/</link><description>Recent content in bash on vim, git, aws and other three-letter words</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 20 Jul 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://serebrov.github.io/tags/bash/index.xml" rel="self" type="application/rss+xml"/><item><title>bash - how to run command in a loop until it fails</title><link>https://serebrov.github.io/html/2023-07-20-bash-how-to-run-command-until-it-fails.html</link><pubDate>Thu, 20 Jul 2023 00:00:00 +0000</pubDate><guid>https://serebrov.github.io/html/2023-07-20-bash-how-to-run-command-until-it-fails.html</guid><description>I want to debug a flaky test and run it multiple times until the test runner returns non-zero code. Here is how to do that with a one-liner: ```bash # Put the command to run into a variable, for convenience CMD="npm run test:unit -- tests/unit/MyTest.spec.ts -t \"'my test case'\"" # Run it multiple times until it fails while eval $CMD; do echo "Command succeeded, retrying..."; done ``` Alternatively, create a script to run the command, it might be more useful if there is a sequence of commands to run: ```bash #!</description></item></channel></rss>