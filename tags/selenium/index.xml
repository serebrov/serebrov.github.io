<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>selenium on vim, git, aws and other three-letter words</title>
    <link>https://serebrov.github.io/tags/selenium/</link>
    <description>Recent content in selenium on vim, git, aws and other three-letter words</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 20 Aug 2012 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://serebrov.github.io/tags/selenium/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>selenium - problem with big file upload</title>
      <link>https://serebrov.github.io/html/2012-08-20-selenium-problem-with-big-file-upload.html</link>
      <pubDate>Mon, 20 Aug 2012 00:00:00 +0000</pubDate>
      
      <guid>https://serebrov.github.io/html/2012-08-20-selenium-problem-with-big-file-upload.html</guid>
      <description>Problem Selenium 2.25.0, python 2.7, ubuntu 12.04, Firebox 4.0 (yes, old version but we need it) hangs when uploading a file larger then (about) 600KB.
Solution For now I fixed this by commenting out local file upload (three first lines):
def send_keys(self, *value): &amp;#34;&amp;#34;&amp;#34;Simulates typing into the element.&amp;#34;&amp;#34;&amp;#34; #local_file = LocalFileDetector.is_local_file(*value) #if local_file is not None: #value = self._upload(local_file) typing = [] for val in value: if isinstance(val, Keys): typing.append(val) elif isinstance(val, int): val = str(val) for i in range(len(val)): typing.</description>
    </item>
    
    <item>
      <title>selenium webdriver - get webelement by jQuery selector</title>
      <link>https://serebrov.github.io/html/2012-08-02-selenium-webdriver-element-by-jquery-selector.html</link>
      <pubDate>Thu, 02 Aug 2012 00:00:00 +0000</pubDate>
      
      <guid>https://serebrov.github.io/html/2012-08-02-selenium-webdriver-element-by-jquery-selector.html</guid>
      <description>This can be necessary for example for selector like #id &amp;gt; li:visible.
If you will try to do webdriver.find_element_by_css_selector you will get an error message &amp;ldquo;The given selector #id &amp;gt; li:visible is either invalid or does not result in a WebElement.&amp;rdquo;
The workaround is to use jQuery to find element. It can be done with this code (python):
script = &amp;quot;return $(&#39;&amp;quot;+selector+&amp;quot;&#39;).get(0);&amp;quot; element = webdriver.execute_script(script);  </description>
    </item>
    
    <item>
      <title>selenium webdriver - set php session cookie</title>
      <link>https://serebrov.github.io/html/2012-07-24-selenium-webdriver-set-php-session-cookie.html</link>
      <pubDate>Tue, 24 Jul 2012 00:00:00 +0000</pubDate>
      
      <guid>https://serebrov.github.io/html/2012-07-24-selenium-webdriver-set-php-session-cookie.html</guid>
      <description>To set the php session cookie we can use the addcookie (or python version add_cookie) method of the webdriver. But it accepts only name and value and does not allow to set additional cookie parameters like domain, path, etc.
Fortunately it is easy to do with javascript.
Here is example of a JS code to set the cookie:
document.cookie = &amp;quot;PHPSESSID=9ojofgkb21nujvhulvgq4drh06; domain=.myhost.com; path=/&amp;quot;;  And here is python code version (assume you have set &amp;lsquo;cookie&amp;rsquo; and &amp;lsquo;domain&amp;rsquo; variables:</description>
    </item>
    
    <item>
      <title>selenium webdriver - trigger event on element via jQuery</title>
      <link>https://serebrov.github.io/html/2012-07-24-selenium-webdriver-trigger-event-via-jquery.html</link>
      <pubDate>Tue, 24 Jul 2012 00:00:00 +0000</pubDate>
      
      <guid>https://serebrov.github.io/html/2012-07-24-selenium-webdriver-trigger-event-via-jquery.html</guid>
      <description>The &amp;lsquo;executeScript&amp;rsquo; method of the webdriver receives additional &amp;lsquo;arguments&amp;rsquo; variable and we can pass WebElement instances to the script. So trigger an event on the elemen can be done like this (python):
event = &#39;click&#39; #or &#39;hover&#39; or any other script = &amp;quot;$(arguments[0]).trigger(&#39;&amp;quot;+event+&amp;quot;&#39;)&amp;quot; webdriver.execute_script(script, web_element)  Links Stackoverflow question</description>
    </item>
    
    <item>
      <title>selenium - problem with loading x_ignore_nofocus.so</title>
      <link>https://serebrov.github.io/html/2012-02-20-selenium-64bit-x_ignore_nofocus-problem.html</link>
      <pubDate>Mon, 20 Feb 2012 00:00:00 +0000</pubDate>
      
      <guid>https://serebrov.github.io/html/2012-02-20-selenium-64bit-x_ignore_nofocus-problem.html</guid>
      <description>Problem: selenium fails to start Firefox with following error:
&#39;The browser appears to have exited before we could connect. The output was: Failed to dlopen /usr/lib/libX11.so.6\ndlerror says: /usr/lib/libX11.so.6: wrong ELF class: ELFCLASS32\n&#39;  In my case it was reproduced on the 64 bit machine with Amazon Linux AMI. The problem itself is known and there is an issue in selenium tracker.
It is because x_ignore_nofocus library tries to load 32bit version of the libX11 instead of 64bit.</description>
    </item>
    
    <item>
      <title>selenium - run tests on a virtual display</title>
      <link>https://serebrov.github.io/html/2012-02-20-selenium-run-on-virtual-display.html</link>
      <pubDate>Mon, 20 Feb 2012 00:00:00 +0000</pubDate>
      
      <guid>https://serebrov.github.io/html/2012-02-20-selenium-run-on-virtual-display.html</guid>
      <description>Selenium tests require browser to run, so usually we run them on the X-server enabled machine. But in some cases, like CI system running on the headless EC2 instance, we want to run it on the virtual display. This can be done using xvfb (X virtual framebuffer).
Set up Install xvfb
sudo apt-get install xvfb Install x11vnc
sudo apt-get install x11vnc Run tests on virtual display Start xvbf (virtual display number 99)</description>
    </item>
    
    <item>
      <title>selenium - python Firefox webdriver - unsafe setters in firefox_profile.py</title>
      <link>https://serebrov.github.io/html/2012-02-20-selenium-python-webdriver-not-safe-setters.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://serebrov.github.io/html/2012-02-20-selenium-python-webdriver-not-safe-setters.html</guid>
      <description>Problem: after setting the boolean flags for Firefox profile the webdriver fails with &amp;ldquo;Can&amp;rsquo;t load the profile&amp;rdquo; error.
I tried to disable native events for Firefox webdriver in a following way:
ffp = webdriver.firefox.firefox_profile.FirefoxProfile(path) if (Config.ff_native_events_enabled == False): ffp.native_events_enabled = False ffb = webdriver.firefox.firefox_binary.FirefoxBinary(firefox_path=Config.browser_binary) selenium = webdriver.Firefox(firefox_profile=ffp, firefox_binary=ffb) After that Firefox starts, but python code can not connect to the webdriver extension.
Test fails with error like this:
Traceback (most recent call last): .</description>
    </item>
    
  </channel>
</rss>