<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>js on vim, git, aws and other three-letter words</title><link>https://serebrov.github.io/tags/js/</link><description>Recent content in js on vim, git, aws and other three-letter words</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 19 Jan 2018 00:00:00 +0000</lastBuildDate><atom:link href="https://serebrov.github.io/tags/js/index.xml" rel="self" type="application/rss+xml"/><item><title>There Is No Callback Hell In JavaScript</title><link>https://serebrov.github.io/html/2018-01-19-there-is-no-callback-hell.html</link><pubDate>Fri, 19 Jan 2018 00:00:00 +0000</pubDate><guid>https://serebrov.github.io/html/2018-01-19-there-is-no-callback-hell.html</guid><description>There is no &amp;ldquo;callback hell&amp;rdquo; in Javascript, it is just a bad programming style. The infamous JavaScript &amp;ldquo;callback hell&amp;rdquo; can easily be fixed by un-nesting all the callbacks into separate functions.
Here is an example:
const verifyUser = function(username, password, callback) { dataBase.verifyUser(username, password, function(error, userInfo) { if (error) { callback(error); } else { dataBase.getRoles(username, function(error, roles) { if (error) { callback(error); } else { dataBase.logAccess(username, function(error) { if (error) { callback(error); } else { callback(null, userInfo, roles); } }) } }) } }) }; The same code with separate functions instead of inline callbacks:</description></item><item><title>JS libraties for charts (links)</title><link>https://serebrov.github.io/html/2013-06-14-js-libraries-for-charts.html</link><pubDate>Fri, 14 Jun 2013 00:00:00 +0000</pubDate><guid>https://serebrov.github.io/html/2013-06-14-js-libraries-for-charts.html</guid><description>D3.js D3.js is a JavaScript library for manipulating documents based on data. D3 helps you bring data to life using HTML, SVG and CSS. D3â€™s emphasis on web standards gives you the full capabilities of modern browsers without tying yourself to a proprietary framework, combining powerful visualization components and a data-driven approach to DOM manipulation.
Browser support: IE9+, For IE8 compatibility it is recommended to use Aight. See also tutorials and re-usable charts for d3.</description></item><item><title>Want Scalable Application Architecture? Check AngularJS.</title><link>https://serebrov.github.io/html/2013-03-18-js-scalable-architecture.html</link><pubDate>Mon, 18 Mar 2013 00:00:00 +0000</pubDate><guid>https://serebrov.github.io/html/2013-03-18-js-scalable-architecture.html</guid><description>The Scalable JavaScript Application Architecture is a presentation by Nicholas Zakas where he suggests a flexible and scalable architecture for JavaScript applications. Here are other related resources:
Presentation summary Presentation slides Patterns For Large-Scale JavaScript Application Architecture by Addy Osmani The presentation is interesting but it also leaves many open questions. In short, the architecture contains following application layers:
base library (jquery, etc) application core: manages modules (register modules, tell when to start and when to stop) handle errors (like wrap all modules&amp;rsquo; methods into try/catch and log errors) enable inter-module communication should be extensible (error handling, ajax wrapper, general utilites, anything!</description></item></channel></rss>